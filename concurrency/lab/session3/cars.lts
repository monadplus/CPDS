const N = 3 // #types of car
range T = 0..N // #cars per type
range ID = 1..N // car ids

CAR = (enter -> exit -> CAR).

// CARS MAY NOT OVERTAKE EACH OTHER
NOPASS1 = C[1],
C[i:ID] = ([i].enter -> C[i%N+1]).

NOPASS2 = C[1],
C[i:ID] = ([i].exit -> C[i%N+1]).

|| CONVOY = ([ID]:CAR || NOPASS1 || NOPASS2).

// BRIDGE (limit the blue/red entry)
BRIDGE = BRIDGE[0][0],
BRIDGE[reds:T][blues:T] =
  ( when(blues==0) red[ID].enter -> BRIDGE[reds+1][blues]
  | red[ID].exit -> BRIDGE[reds-1][blues]
  | when(reds==0) blue[ID].enter -> BRIDGE[reds][blues+1]
  | blue[ID].exit -> BRIDGE[reds][blues-1]
  ).

property ONEWAY =
  (red[ID].enter -> RED[1] | blue[ID].enter -> BLUE[1]),
RED[i:ID] =
  ( red[ID].enter -> RED[i+1]
  | when(i==1) red[ID].exit -> ONEWAY
  | when(i>1) red[ID].exit -> RED[i-1]
  ),
BLUE[i:ID] =
  ( blue[ID].enter -> BLUE[i+1]
  | when(i==1) blue[ID].exit -> ONEWAY
  | when(i>1) blue[ID].exit -> BLUE[i-1]
  ).

||CARS = ({red,blue}:CONVOY).

// Without the bridge, the cars crash.
//|| SingleLageBridge = (CARS || ONEWAY).
|| SingleLageBridge = (CARS || BRIDGE || ONEWAY).
