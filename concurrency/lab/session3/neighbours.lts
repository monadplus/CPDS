// Two neighbor separeted by a field of berries
// They agree to permit each other to enter the field of berries but only one at a time.
// Protocol:
//  - raise a flag
//  - when (the other flag is raised) lower the flag and retrie.
//  - otherwise enter the field, pick berries, leave the field and lower the flag.
const False = 0
const True = 1
range Bool = False..True

// alphabet extension
set BoolActions = {setTrue, setFalse, [False], [True]}

BOOLVAR = VAL[False],
VAL[v:Bool] = 
  ( setTrue   -> VAL[True]
  | setFalse  -> VAL[False]
  | [v]       -> VAL[v]
  ).
// each one has a flag
||FLAGS = (flag1:BOOLVAR || flag2:BOOLVAR).

NEIGHBOR1 = (flag1.setTrue -> TEST),
TEST = 
  (flag2[raised:Bool] -> 
     if (raised) then (flag1.setFalse -> NEIGHBOR1) 
                 else (enter -> pick -> exit -> flag1.setFalse -> NEIGHBOR1)) + {{flag1.flag2}.BoolActions}.

NEIGHBOR2 = (flag2.setTrue -> TEST),
TEST = 
  (flag1[raised:Bool] -> 
     if (raised) then (flag2.setFalse -> NEIGHBOR2) 
                 else (enter -> pick -> exit -> flag2.setFalse -> NEIGHBOR2)) + {{flag1.flag2}.BoolActions}.

property MUTEX = 
  ( n1.enter -> n1.pick -> n1.exit -> MUTEX 
  | n2.enter -> n2.pick -> n2.exit -> MUTEX
  ).
        

||FIELD = (n1:NEIGHBOR1 || n2:NEIGHBOR2 || {n1,n2}::FLAGS || MUTEX).

||GREEDY = FIELD << {{n1,n2}.{flag1,flag2}.setTrue}.

progress ENTER1 = {n1.enter}
progress ENTER2 = {n2.enter}

